openapi: 3.0.2
info:
  title: demo user app
  description: "demo user app description"
  termsOfService: https://editor.swagger.io/
  contact:
    email: example@gmail.com
    url: https://swagger.io/specification/
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1-SNAPSHOT
externalDocs:
  description: Find out more about swagger
  url: https://swagger.io/specification/
servers:
  - url: http://localhost:8080
tags:
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io

paths:
  /api/users:
    get:
      tags:
        - user
      summary: Get all users
      operationId: getAllUsers
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRsList'
        404:
          description: User not found
          content:
            application/json: { }
    post:
      tags:
        - user
      summary: Create user
      description: Create user functionality
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UserRegistrationRq'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegistrationRs'
        404:
          description: User not found
          content:
            application/json: { }

  /api/users/{id}:
    get:
      tags:
        - user
      summary: Get user by id
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: 'The id that needs to be fetched. Use 123 for example. '
          required: true
          schema:
            type: string
          example: 123
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRs'
        404:
          description: User not found
          content:
            application/json: { }
    delete:
      summary: delete user by id
      operationId: deleteUserById
      tags:
        - user
      parameters:
        - name: id
          in: path
          description: 'The id that needs to be delete user. Use 123 for example. '
          required: true
          schema:
            type: string
          example: 123
      responses:
        200:
          description: successful operation
          content:
            application/json: { }
        404:
          description: User not found
          content:
            application/json: { }
    put:
      tags:
        - user
      parameters:
        - name: id
          in: path
          description: 'The id that needs to be delete user. Use 123 for example. '
          required: true
          schema:
            type: string
          example: 123
      summary: Updated user
      operationId: updateUser
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UserUpdateRq'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUpdateRq'
        400:
          description: Invalid user supplied
          content: { }
        404:
          description: User not found
          content: { }

components:
  schemas:
    UserRegistrationRq:
      type: object
      required:
        - password
        - email
      properties:
        password:
          type: string
          example: password
        email:
          type: string
          example: example@mail.ru
    UserRegistrationRs:
      type: object
      required:
        - id
        - email
      properties:
        id:
          type: string
          example: 123
        email:
          type: string
          example: example@mail.ru
    UserUpdateRq:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          example: 123
        name:
          type: string
          example: vasya
        surname:
          type: string
          example: ivanov
    UserRs:
      type: object
      required:
        - id
        - email
      properties:
        id:
          type: string
          example: 123
        email:
          type: string
          example: example@mail.ru
        name:
          type: string
          example: masha
        surname:
          type: string
          example: ivanov
    UserRsList:
      type: array
      items:
        $ref: "#/components/schemas/UserRs"
